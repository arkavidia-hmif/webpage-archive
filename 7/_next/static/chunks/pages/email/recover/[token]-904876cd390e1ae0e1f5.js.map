{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?d37f","webpack://_N_E/./components/auth/InputField.tsx","webpack://_N_E/./pages/email/recover/[token].tsx"],"names":["window","__NEXT_P","push","InputField","name","type","value","setValue","placeholder","id","toLowerCase","replace","htmlFor","onChange","evt","target","EmailRecover","apiContext","useContext","ApiContext","authContext","AuthContext","token","useRouter","query","useState","password","setPassword","confirmPassword","setConfirmPassword","loading","setLoading","success","setSuccess","error","setError","title","href","text","padding","onSubmit","preventDefault","authenticated","length","resetPassword","axios","then","e","ApiError","code","EmailResetPasswordStatus","INVALID_TOKEN","message","submit"],"mappings":"+FACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,yBACA,WACE,OAAO,EAAQ,Y,gGCqDRC,IAjDqB,SAAC,GAA0D,IAAxDC,EAAwD,EAAxDA,KAAwD,IAAlDC,YAAkD,MAA3C,OAA2C,EAAnCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAErEC,EAAKL,EAAKM,cAAcC,QAAQ,MAAO,IAE7C,OACE,qCACE,WAAOC,QAASH,EAAhB,4BAAqBL,GACrB,WAAOK,GAAIA,EAAIJ,KAAMA,EAAMC,MAAOA,EAAOO,SAAU,SAACC,GAAUP,EAASO,EAAIC,OAAOT,QAAWE,YAAaA,EAA1G,6BAFF,i3B,wPCmHWQ,UAnHgB,WAC7B,IAAMC,EAAaC,qBAAWC,KACxBC,EAAcF,qBAAWG,KAGvBC,EADOC,sBACUC,MAAjBF,MAER,IAAKA,EAAO,OAAO,KAPgB,MASHG,mBAAS,IAAlCC,EAT4B,KASlBC,EATkB,OAUWF,mBAAS,IAAhDG,EAV4B,KAUXC,EAVW,OAYLJ,oBAAS,GAAhCK,EAZ4B,KAYnBC,EAZmB,OAaLN,oBAAS,GAAhCO,EAb4B,KAanBC,EAbmB,OAcTR,mBAAwB,MAA3CS,EAd4B,KAcrBC,EAdqB,KAyDnC,OACE,EAAC,IAAD,CAAaC,MAAM,oBACfJ,EAsCE,oBACE,2FAGA,EAAC,IAAD,CAAMK,KAAK,UACT,EAAC,IAAD,CAAcC,KAAK,mBAAmBC,QAAQ,mBA1CpD,oBACE,EAAC,IAAD,CAAOL,MAAOA,IACd,gIAIA,UACEM,SAAU,SAAC1B,GACTA,EAAI2B,iBAnDdN,EAAS,MAELf,EAAYsB,cACdP,EAAS,+DAIPT,EAASiB,OAAS,EACpBR,EAAS,iCAIPT,IAAaE,GAKjBG,GAAW,GAEXa,YAAc3B,EAAW4B,MAAOvB,EAAiBI,GAC9CoB,MAAK,WACJb,GAAW,MAFf,OAIS,SAACc,GAEJA,aAAaC,KACbD,EAAEE,OAASC,IAAyBC,cAEpChB,EACE,8DAGFA,EAASY,EAAEK,YAbjB,SAgBW,WACPrB,GAAW,OAvBbI,EAAS,sCAoCL,4BAME,EAAC,IAAD,CACE/B,KAAK,aACLC,KAAK,WACLC,MAAOoB,EACPnB,SAAUoB,EACVnB,YAAY,iBAEd,EAAC,IAAD,CACEJ,KAAK,wBACLC,KAAK,WACLC,MAAOsB,EACPrB,SAAUsB,EACVrB,YAAY,iBAEd,qCACA,EAAC,IAAD,CACE8B,KAAK,QACLR,QAASA,EACTS,QAAQ,eACRc,QAAM,MAjChB,kE","file":"static/chunks/pages/email/recover/[token]-904876cd390e1ae0e1f5.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/email/recover/[token]\",\n      function () {\n        return require(\"private-next-pages/email/recover/[token].tsx\");\n      }\n    ]);\n  ","interface Props {\n  name: string,\n  type?: string,\n  value: string,\n  setValue: (newValue: string) => void,\n  placeholder: string\n}\n\nconst InputField: React.FC<Props> = ({ name, type = \"text\", value, setValue, placeholder }) => {\n\n  const id = name.toLowerCase().replace(/\\s/g, \"\");\n\n  return (\n    <div>\n      <label htmlFor={id}>{name}</label>\n      <input id={id} type={type} value={value} onChange={(evt) => { setValue(evt.target.value); }} placeholder={placeholder} />\n      <style jsx>{`\n        label {\n          font-style: normal;\n          font-weight: bold;\n          font-size: 1.4rem;\n          line-height: 1.2rem;\n          display: block;\n          color: #000000;\n          margin-top: 0.8rem;\n        }\n\n        input {\n          width: 100%;\n          border: none;\n          padding: 0.5rem 0 0.5rem 0;\n          border-bottom: 0.15rem solid black;\n          box-sizing: border-box;\n          background: none;\n          margin: 0.5rem 0 1rem 0;\n        }\n\n        input[type=\"text\"], input[type=\"password\"] {\n          font-size: 1.2rem;\n          font-style: normal;\n          font-weight: bold;\n        }\n\n        input:focus {\n          outline: none;\n        }\n\n        ::placeholder {\n          font-style: normal;\n          font-weight: bold;\n          font-size: 1.2rem;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default InputField;","import { useRouter } from \"next/dist/client/router\";\nimport Link from \"next/link\";\nimport { useContext, useState } from \"react\";\nimport Alert from \"../../../components/Alert\";\nimport AuthWrapper from \"../../../components/auth/AuthWrapper\";\nimport InputField from \"../../../components/auth/InputField\";\nimport FilledButton from \"../../../components/FilledButton\";\nimport { EmailResetPasswordStatus } from \"../../../interfaces/auth\";\nimport { ApiContext } from \"../../../utils/context/api\";\nimport { AuthContext } from \"../../../utils/context/auth\";\nimport { ApiError } from \"interfaces/api\";\nimport { resetPassword } from \"api/auth\";\n\nconst EmailRecover: React.FC = () => {\n  const apiContext = useContext(ApiContext);\n  const authContext = useContext(AuthContext);\n\n  const router = useRouter();\n  const { token } = router.query;\n\n  if (!token) return null;\n\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const onSubmit = () => {\n    setError(null);\n\n    if (authContext.authenticated) {\n      setError(\"Sedang login dengan akun lain, harap logout terlebih dahulu\");\n      return;\n    }\n\n    if (password.length < 8) {\n      setError(\"Kata sandi minimal 8 karakter\");\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setError(\"Pengulangan kata sandi harus sama\");\n      return;\n    }\n\n    setLoading(true);\n\n    resetPassword(apiContext.axios, token as string, password)\n      .then(() => {\n        setSuccess(true);\n      })\n      .catch((e) => {\n        if (\n          e instanceof ApiError &&\n          e.code === EmailResetPasswordStatus.INVALID_TOKEN\n        ) {\n          setError(\n            \"Tautan ini salah, silakan coba lakukan reset password lagi\"\n          );\n        } else {\n          setError(e.message);\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <AuthWrapper title=\"Ganti Kata Sandi\">\n      {!success ? (\n        <>\n          <Alert error={error} />\n          <p className=\"my-3 mb-4\">\n            Jangan khawatir, masukkan emailmu untuk mendapatkan tautan perubahan\n            kata sandi\n          </p>\n          <form\n            onSubmit={(evt) => {\n              evt.preventDefault();\n              onSubmit();\n            }}\n          >\n            <InputField\n              name=\"Kata Sandi\"\n              type=\"password\"\n              value={password}\n              setValue={setPassword}\n              placeholder=\"************\"\n            />\n            <InputField\n              name=\"Konfirmasi Kata Sandi\"\n              type=\"password\"\n              value={confirmPassword}\n              setValue={setConfirmPassword}\n              placeholder=\"************\"\n            />\n            <br />\n            <FilledButton\n              text=\"GANTI\"\n              loading={loading}\n              padding=\"0.75em 1.5em\"\n              submit\n            />\n          </form>\n        </>\n      )\n        : (\n          <>\n            <p className=\"my-3\">\n              Sukses, silahkan login dengan kata sandi barumu\n            </p>\n            <Link href=\"/login\">\n              <FilledButton text=\"KEMBALI KE LOGIN\" padding=\"0.75em 1.5em\" />\n            </Link>\n          </>\n        )}\n      <style jsx>{`\n        p {\n          color: #7446a1;\n        }\n      `}</style>\n    </AuthWrapper>\n  );\n};\n\nexport default EmailRecover;\n"],"sourceRoot":""}