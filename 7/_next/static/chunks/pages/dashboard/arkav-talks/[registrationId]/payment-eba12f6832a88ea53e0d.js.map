{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?f33d","webpack://_N_E/./utils/constants/talks-stage.ts","webpack://_N_E/./interfaces/event.ts","webpack://_N_E/./api/event.ts","webpack://_N_E/./components/page/dashboard/TalksPayment.tsx","webpack://_N_E/./pages/dashboard/arkav-talks/[registrationId]/payment.tsx"],"names":["window","__NEXT_P","push","TALKS_REGISTRATION_STAGE","TALKS_PAYMENT_TASK_INDEX","TALKS_PUBLIC_CAT","TALKS_ADVANCED_CAT","EventRegisterStatus","LIST_EVENT_URL","LIST_EVENT_PARTICIPANT_URL","getEvent","axios","a","get","then","response","data","error","ApiError","StandardError","ERROR","message","getEventRegistration","registerForEvent","eventId","post","maineventId","errorCode","code","cancelEventRegistration","registrationId","getEventRegistrationDetail","submitEventTaskResponse","taskId","value","TalksPayment","apiContext","useContext","ApiContext","router","useRouter","registrationIdQuery","query","Array","isArray","useSWR","parseInt","registrationDetail","registrationDetailError","registrationDetailMutate","mutate","Alert","Spinner","widgetList","stages","tasks","task","taskResponseById","filterAndGroupEventTaskResponse","className","selection","id","submitFunction","editable","FilledButton","padding","text","onClick","back","EventMainPage","Layout","title","background","Theme","bgColors","whtogr","DashboardWrapper"],"mappings":"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","file":"static/chunks/pages/dashboard/arkav-talks/[registrationId]/payment-eba12f6832a88ea53e0d.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/dashboard/arkav-talks/[registrationId]/payment\",\n      function () {\n        return require(\"private-next-pages/dashboard/arkav-talks/[registrationId]/payment.tsx\");\n      }\n    ]);\n  ","export const TALKS_REGISTRATION_STAGE = \"Registrasi\";\nexport const TALKS_PAYMENT_TASK_INDEX = 0;\n\nexport const TALKS_PUBLIC_CAT = \"Public Talks\";\nexport const TALKS_ADVANCED_CAT = \"Advanced Talks\";\n","import { UserData } from \"./auth\";\nimport { Task, TaskResponse } from \"./task\";\n\nexport interface Event {\n  id: number;\n  name: string;\n  slug: string;\n  category: string;\n  isRegistrationOpen: boolean;\n  shortDesc: string;\n  beginTime: string;\n  endTime: string;\n  order: number;\n  seatsAvailable: number;\n  seatsRemaining: number;\n}\n\nexport interface Stage {\n  id: number;\n  name: string;\n  order: number;\n  tasks: Array<Task>;\n}\n\nexport interface EventRegistration {\n  id: number,\n  mainevent: Event,\n  user: UserData,\n  isParticipating: boolean\n}\n\nexport interface EventRegistrationDetail extends EventRegistration {\n  stages: Array<Stage>;\n  taskResponses: Array<TaskResponse>;\n  createdAt: string;\n  activeStageId: number;\n}\n\n\nexport enum EventRegisterStatus {\n  ERROR,\n  FULL\n}\n","import { AxiosError, AxiosInstance } from \"axios\";\nimport { Event, EventRegisterStatus, EventRegistration, EventRegistrationDetail } from \"interfaces/event\";\nimport { ApiError, StandardError } from \"interfaces/api\";\nimport { TaskResponse } from \"interfaces/task\";\n\nexport const LIST_EVENT_URL = \"/mainevent/\";\nexport const LIST_EVENT_PARTICIPANT_URL = \"/mainevent/registrants/\";\n\nexport const getEvent = async (\n  axios: AxiosInstance\n): Promise<Array<Event>> => {\n  return axios\n    .get<Array<Event>>(LIST_EVENT_URL)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const getEventRegistration = async (\n  axios: AxiosInstance\n): Promise<Array<EventRegistration>> => {\n  return axios\n    .get(LIST_EVENT_PARTICIPANT_URL)\n    .then(response => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const registerForEvent = async (\n  axios: AxiosInstance,\n  eventId: number\n): Promise<void> => {\n  return axios\n    .post(\"/mainevent/register/\", {\n      maineventId: eventId\n    }).then(() => {\n      return;\n    }).catch((error: AxiosError) => {\n      if (error.response) {\n        const errorCode = error.response.data.code;\n        if (errorCode === \"create_registrant_fail\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Gagal mendaftar, harap coba lagi dan hubungi pantitia jika gagal kembali\");\n        } else if (errorCode === \"mainevent_registration_closed\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Pendaftaran belum dibuka\");\n        } else if (errorCode === \"mainevent_already_registered\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Sudah terdaftar, coba refresh halaman\");\n        } else if (errorCode === \"profile_incomplete\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Harap lengkapi profil terlebih dahulu\");\n        }\n      }\n\n      throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, error.message);\n    });\n};\n\nexport const cancelEventRegistration = async (\n  axios: AxiosInstance,\n  registrationId: number\n): Promise<void> => {\n  return axios.delete(`/mainevent/registrants/${registrationId}/`)\n    .then(() => {\n      return;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const getEventRegistrationDetail = async (\n  axios: AxiosInstance,\n  registrationId: number\n): Promise<EventRegistrationDetail> => {\n  return axios\n    .get<EventRegistrationDetail>(`/mainevent/registrants/${registrationId}/`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\n\nexport const submitEventTaskResponse = async (\n  axios: AxiosInstance,\n  registrationId: number,\n  taskId: number,\n  value: string\n): Promise<TaskResponse> => {\n  return axios\n    .post<TaskResponse>(\n      `/mainevent/registrants/${registrationId}/tasks/${taskId}/`,\n      { response: value })\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};","import { useContext } from \"react\";\nimport useSWR from \"swr\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { getEventRegistrationDetail, submitEventTaskResponse } from \"api/event\";\nimport Alert from \"components/Alert\";\nimport StageTask from \"components/dashboard/stagetask\";\nimport Spinner from \"components/Spinner\";\nimport { Task } from \"interfaces/task\";\nimport { ApiContext } from \"utils/context/api\";\nimport { filterAndGroupEventTaskResponse } from \"utils/transformer/task\";\nimport FilledButton from \"components/FilledButton\";\nimport { TALKS_PAYMENT_TASK_INDEX } from \"utils/constants/talks-stage\";\n\n\nconst TalksPayment: React.FC = () => {\n  const apiContext = useContext(ApiContext);\n\n  const router = useRouter();\n  const { registrationId: registrationIdQuery } = router.query;\n\n  const registrationId = Array.isArray(registrationIdQuery) ? registrationIdQuery[0] : registrationIdQuery;\n\n  const {\n    data: registrationDetail,\n    error: registrationDetailError,\n    mutate: registrationDetailMutate,\n  } = useSWR(`/mainevent/registrants/${registrationId}/`, () =>\n    getEventRegistrationDetail(apiContext.axios, parseInt(registrationId, 10))\n  );\n\n  if (registrationDetailError) return <Alert error=\"Masalah koneksi\" />;\n  if (!registrationDetail) return <Spinner />;\n\n  const widgetList: Array<Task> = [];\n  for (const stage of registrationDetail.stages) {\n    for (const task of stage.tasks) {\n      widgetList.push(task);\n    }\n  }\n\n  const taskResponseById = filterAndGroupEventTaskResponse(\n    registrationDetail\n  );\n\n  const task = widgetList[TALKS_PAYMENT_TASK_INDEX];\n\n  const taskResponseFunction =\n    (value: string) => submitEventTaskResponse(\n      apiContext.axios,\n      parseInt(registrationId, 10),\n      task.id,\n      value\n    );\n\n\n  return (\n    <div className=\"col-md-8 offset-md-2 col-12\">\n      <StageTask\n        mutate={registrationDetailMutate}\n        selection={0}\n        task={task}\n        response={taskResponseById[task.id]}\n        submitFunction={taskResponseFunction}\n        editable={true}\n      />\n      <br />\n      <FilledButton\n        padding=\"0.5rem 2rem\"\n        text=\"Kembali\"\n        onClick={() => {\n          router.back();\n        }}\n      />\n    </div>\n  );\n};\n\nexport default TalksPayment;","import DashboardWrapper from \"components/dashboard/DashboardWrapper\";\nimport Layout from \"components/Layout\";\nimport TalksPayment from \"components/page/dashboard/TalksPayment\";\nimport { Theme } from \"styles/theme\";\n\nconst EventMainPage: React.FC = () => {\n  return (\n    <Layout title=\"Events\" background={Theme.bgColors.whtogr}>\n      <DashboardWrapper>\n        <TalksPayment />\n      </DashboardWrapper>\n    </Layout>\n  );\n};\n\nexport default EventMainPage;"],"sourceRoot":""}