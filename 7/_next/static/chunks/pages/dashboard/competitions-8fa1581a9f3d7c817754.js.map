{"version":3,"sources":["webpack://_N_E/./api/competition.ts","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?872e","webpack://_N_E/./components/page/dashboard/CompetitionsPage.tsx","webpack://_N_E/./utils/transformer/competition.ts","webpack://_N_E/./pages/dashboard/competitions/index.tsx","webpack://_N_E/./interfaces/team.ts","webpack://_N_E/./api/team.ts"],"names":["LIST_COMPETITION_URL","SUBMIT_TASK_REPONSE_COMPETITION_URL","team_id","task_id","getCompetitions","axios","a","get","then","response","data","error","ApiError","StandardError","ERROR","message","submitTaskResponseCompetition","res","post","window","__NEXT_P","push","CompetitionsPage","baseUrl","apiContext","useContext","ApiContext","authContext","AuthContext","useSWR","competition","errorCompetiton","LIST_TEAM_URL","getTeam","team","errorTeam","Alert","Spinner","height","teamBySlug","output","forEach","entry","slug","groupTeamByCompetitionSlug","generateCardText","isParticipating","isRegistrationOpen","generateUrl","auth","user","currentEducation","style","textAlign","className","map","index","minEntry","maxEntry","DashboardCard","key","title","name","body","minTeamMembers","maxTeamMembers","buttonLink","buttonText","IndexPage","Layout","background","Theme","bgColors","whtogr","DashboardWrapper","TeamRegistrationStatus","createTeam","teamForm","errorCode","code","NAME_TAKEN","detail","CANNOT_CREATE_ANOTHER_TEAM","getTeamDetail","teamId","editTeam","patch","deleteTeam"],"mappings":"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","file":"static/chunks/pages/dashboard/competitions-8fa1581a9f3d7c817754.js","sourcesContent":["import { AxiosError, AxiosInstance } from \"axios\";\nimport { Competition } from \"interfaces/competition\";\nimport { TaskResponse } from \"interfaces/task\";\nimport { ApiError, StandardError } from \"interfaces/api\";\n\nexport const LIST_COMPETITION_URL = \"/competition/\";\n\nexport const SUBMIT_TASK_REPONSE_COMPETITION_URL = (\n  team_id: number,\n  task_id: number\n): string => `/competition/teams/${team_id}/tasks/${task_id}/`;\n\nexport const getCompetitions = async (\n  axios: AxiosInstance\n): Promise<Array<Competition>> => {\n  return axios\n    .get<Array<Competition>>(LIST_COMPETITION_URL)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const submitTaskResponseCompetition = async (\n  axios: AxiosInstance,\n  task_id: number,\n  team_id: number,\n  res: string\n): Promise<TaskResponse> => {\n  try {\n    const response = await axios.post(\n      SUBMIT_TASK_REPONSE_COMPETITION_URL(team_id, task_id),\n      {\n        response: res,\n      }\n    );\n\n    return response.data as TaskResponse;\n  } catch (e) {\n    throw new ApiError<StandardError>(StandardError.ERROR, e.message);\n  }\n};\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/dashboard/competitions\",\n      function () {\n        return require(\"private-next-pages/dashboard/competitions/index.tsx\");\n      }\n    ]);\n  ","import { useContext } from \"react\";\nimport useSWR from \"swr\";\nimport {\n  getCompetitions,\n  LIST_COMPETITION_URL,\n} from \"api/competition\";\nimport { LIST_TEAM_URL, getTeam } from \"api/team\";\nimport { ApiContext } from \"utils/context/api\";\nimport DashboardCard from \"components/dashboard/DashboardCard\";\nimport { groupTeamByCompetitionSlug } from \"utils/transformer/competition\";\nimport { Competition } from \"interfaces/competition\";\nimport Alert from \"components/Alert\";\nimport Spinner from \"components/Spinner\";\nimport { AuthContext } from \"utils/context/auth\";\n\nconst CompetitionsPage: React.FC = () => {\n  const baseUrl = \"/dashboard/competitions/\";\n\n  const apiContext = useContext(ApiContext);\n  const authContext = useContext(AuthContext);\n\n  const {\n    data: competition,\n    error: errorCompetiton,\n  } = useSWR(LIST_COMPETITION_URL, () => getCompetitions(apiContext.axios));\n  const { data: team, error: errorTeam } = useSWR(LIST_TEAM_URL, () =>\n    getTeam(apiContext.axios)\n  );\n\n  if (errorCompetiton || errorTeam) return <Alert error=\"Masalah koneksi\" />;\n  if (!competition || !team) return <Spinner height=\"200px\" />;\n\n  const teamBySlug = groupTeamByCompetitionSlug(team);\n\n  const generateCardBody = (minEntry: number, maxEntry: number): string => {\n    if (minEntry === maxEntry) {\n      return `Tim terdiri dari tepat ${minEntry} orang`;\n    } else {\n      return `Tim terdiri dari ${minEntry} sampai ${maxEntry} orang`;\n    }\n  };\n\n  const generateCardText = (entry: Competition): string => {\n    if (teamBySlug[entry.slug]?.isParticipating) {\n      return \"Lihat Pendaftaran\";\n    } else {\n      return !entry.isRegistrationOpen\n        ? \"Pendaftaran Ditutup\"\n        : \"Daftar\";\n    }\n  };\n\n  const generateUrl = (entry: Competition): string => {\n    if (teamBySlug[entry.slug]?.isParticipating) {\n      return `${baseUrl}${entry.slug}`;\n    } else {\n      return `${baseUrl}${entry.slug}/register-tim`;\n    }\n  };\n\n  if (authContext.auth && !authContext.auth.user.currentEducation) {\n    return (\n      <p style={{ textAlign: \"center\" }}>\n        Harap melengkapi profil terlebih dahulu\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"mb-3\">\n      <div className=\"row\">\n        {competition.map((entry, index) => (\n          <DashboardCard\n            key={index}\n            className=\"col-md-6 col-lg-4\"\n            title={entry.name}\n            body={generateCardBody(entry.minTeamMembers, entry.maxTeamMembers)}\n            buttonLink={entry.isRegistrationOpen || teamBySlug[entry.slug]?.isParticipating ? generateUrl(entry) : null}\n            buttonText={generateCardText(entry)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CompetitionsPage;\n","import { TeamData } from \"../../interfaces/team\";\n\nexport function groupTeamByCompetitionSlug(\n  response: TeamData[]\n): { [slug: string]: TeamData } {\n  const output: { [slug: string]: TeamData } = {};\n  response.forEach((entry) => {\n    output[entry.competition.slug] = entry;\n  });\n\n  return output;\n}\n","import DashboardWrapper from \"components/dashboard/DashboardWrapper\";\nimport Layout from \"components/Layout\";\nimport { Theme } from \"styles/theme\";\nimport CompetitionsPage from \"components/page/dashboard/CompetitionsPage\";\n\nconst IndexPage: React.FC = () => (\n  <Layout title=\"Competitions\" background={Theme.bgColors.whtogr}>\n    <DashboardWrapper>\n      <CompetitionsPage />\n    </DashboardWrapper>\n  </Layout>\n);\n\nexport default IndexPage;\n","import { Competition } from \"./competition\";\nimport { CompetitionTaskResponse, Stage } from \"./task\";\n\nexport interface TeamRegistrationForm {\n  competitionId: number;\n  name: string;\n  institution: string;\n}\n\nexport interface TeamData {\n  id: number;\n  competition: Competition;\n  name: string;\n  teamLeaderEmail: string;\n  institution: string;\n  isParticipating: boolean;\n  category: string;\n}\n\nexport interface TeamDetailData {\n  id: number;\n  competition: Competition;\n  category: string;\n  name: string;\n  teamLeaderEmail: string;\n  institution: string;\n  isParticipating: boolean;\n  teamMembers: Array<TeamMember>;\n  activeStageId: number;\n  stages: Array<Stage>;\n  taskResponses: Array<CompetitionTaskResponse>;\n  userTaskResponses: Array<CompetitionTaskResponse>;\n  createdAt: string;\n}\n\nexport interface TeamMember {\n  id: number;\n  fullName: string;\n  email: string;\n  hasAccount: boolean;\n  isTeamLeader: boolean;\n  createdAt: string;\n}\n\nexport enum TeamRegistrationStatus {\n  ERROR,\n  NAME_TAKEN,\n  CANNOT_CREATE_ANOTHER_TEAM,\n}\n","import { AxiosError, AxiosInstance } from \"axios\";\nimport {\n  TeamData,\n  TeamDetailData,\n  TeamRegistrationForm,\n  TeamRegistrationStatus,\n} from \"../interfaces/team\";\nimport { ApiError, StandardError } from \"interfaces/api\";\n\nexport const REGISTER_TEAM_URL = \"/competition/register-team/\";\nexport const LIST_TEAM_URL = \"/competition/teams/\";\n\nexport const createTeam = async (\n  axios: AxiosInstance,\n  teamForm: TeamRegistrationForm\n): Promise<TeamData> => {\n  return axios\n    .post<TeamData>(REGISTER_TEAM_URL, teamForm)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      if (error.response) {\n        const errorCode = error.response.data.code;\n        if (errorCode === \"team_name_is_used\") {\n          throw new ApiError<TeamRegistrationStatus>(\n            TeamRegistrationStatus.NAME_TAKEN,\n            error.response.data.detail\n          );\n        } else if (errorCode === \"create_team_fail\") {\n          throw new ApiError<TeamRegistrationStatus>(\n            TeamRegistrationStatus.CANNOT_CREATE_ANOTHER_TEAM,\n            error.response.data.detail\n          );\n        } else {\n          throw new ApiError<TeamRegistrationStatus>(\n            TeamRegistrationStatus.ERROR,\n            error.response.data.detail\n          );\n        }\n      }\n\n      throw new ApiError<TeamRegistrationStatus>(\n        TeamRegistrationStatus.ERROR,\n        error.message\n      );\n    });\n};\n\nexport const getTeam = async (\n  axios: AxiosInstance\n): Promise<Array<TeamData>> => {\n  return axios\n    .get<Array<TeamData>>(LIST_TEAM_URL)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const getTeamDetail = async (\n  axios: AxiosInstance,\n  teamId: number\n): Promise<TeamDetailData> => {\n  return axios\n    .get<TeamDetailData>(`/competition/teams/${teamId}/`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const putTeam = async (\n  axios: AxiosInstance,\n  teamForm: TeamData,\n  teamId: string\n): Promise<TeamData> => {\n  return axios\n    .put<TeamData>(`/competition/teams/${teamId}/`, teamForm)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const editTeam = async (\n  axios: AxiosInstance,\n  teamForm: Partial<TeamData>,\n  teamId: string\n): Promise<TeamData> => {\n  return axios\n    .patch<TeamData>(`/competition/teams/${teamId}/`, teamForm)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const deleteTeam = async (\n  axios: AxiosInstance,\n  teamId: string\n): Promise<void> => {\n  return axios\n    .delete(`/competition/teams/${teamId}`)\n    .then(() => {\n      return;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n"],"sourceRoot":""}