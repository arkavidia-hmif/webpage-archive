{"version":3,"sources":["webpack://_N_E/./interfaces/event.ts","webpack://_N_E/./api/event.ts","webpack://_N_E/./components/page/dashboard/EventsPage.tsx","webpack://_N_E/./pages/dashboard/events/index.tsx","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?27f2"],"names":["EventRegisterStatus","LIST_EVENT_URL","LIST_EVENT_PARTICIPANT_URL","getEvent","axios","a","get","then","response","data","error","ApiError","StandardError","ERROR","message","getEventRegistration","registerForEvent","eventId","post","maineventId","errorCode","code","cancelEventRegistration","registrationId","getEventRegistrationDetail","submitEventTaskResponse","taskId","value","EventsPage","apiContext","useContext","ApiContext","useSWR","event","Alert","Spinner","height","generateCardText","entry","isRegistrationOpen","className","map","index","DashboardCard","key","title","name","body","shortDesc","buttonLink","slug","buttonText","IndexPage","Layout","background","Theme","bgColors","whtogr","DashboardWrapper","window","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/dashboard/events-efee49c7542749ba82b4.js","sourcesContent":["import { UserData } from \"./auth\";\nimport { Task, TaskResponse } from \"./task\";\n\nexport interface Event {\n  id: number;\n  name: string;\n  slug: string;\n  category: string;\n  isRegistrationOpen: boolean;\n  shortDesc: string;\n  beginTime: string;\n  endTime: string;\n  order: number;\n  seatsAvailable: number;\n  seatsRemaining: number;\n}\n\nexport interface Stage {\n  id: number;\n  name: string;\n  order: number;\n  tasks: Array<Task>;\n}\n\nexport interface EventRegistration {\n  id: number,\n  mainevent: Event,\n  user: UserData,\n  isParticipating: boolean\n}\n\nexport interface EventRegistrationDetail extends EventRegistration {\n  stages: Array<Stage>;\n  taskResponses: Array<TaskResponse>;\n  createdAt: string;\n  activeStageId: number;\n}\n\n\nexport enum EventRegisterStatus {\n  ERROR,\n  FULL\n}\n","import { AxiosError, AxiosInstance } from \"axios\";\nimport { Event, EventRegisterStatus, EventRegistration, EventRegistrationDetail } from \"interfaces/event\";\nimport { ApiError, StandardError } from \"interfaces/api\";\nimport { TaskResponse } from \"interfaces/task\";\n\nexport const LIST_EVENT_URL = \"/mainevent/\";\nexport const LIST_EVENT_PARTICIPANT_URL = \"/mainevent/registrants/\";\n\nexport const getEvent = async (\n  axios: AxiosInstance\n): Promise<Array<Event>> => {\n  return axios\n    .get<Array<Event>>(LIST_EVENT_URL)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const getEventRegistration = async (\n  axios: AxiosInstance\n): Promise<Array<EventRegistration>> => {\n  return axios\n    .get(LIST_EVENT_PARTICIPANT_URL)\n    .then(response => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const registerForEvent = async (\n  axios: AxiosInstance,\n  eventId: number\n): Promise<void> => {\n  return axios\n    .post(\"/mainevent/register/\", {\n      maineventId: eventId\n    }).then(() => {\n      return;\n    }).catch((error: AxiosError) => {\n      if (error.response) {\n        const errorCode = error.response.data.code;\n        if (errorCode === \"create_registrant_fail\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Gagal mendaftar, harap coba lagi dan hubungi pantitia jika gagal kembali\");\n        } else if (errorCode === \"mainevent_registration_closed\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Pendaftaran belum dibuka\");\n        } else if (errorCode === \"mainevent_already_registered\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Sudah terdaftar, coba refresh halaman\");\n        } else if (errorCode === \"profile_incomplete\") {\n          throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, \"Harap lengkapi profil terlebih dahulu\");\n        }\n      }\n\n      throw new ApiError<EventRegisterStatus>(EventRegisterStatus.ERROR, error.message);\n    });\n};\n\nexport const cancelEventRegistration = async (\n  axios: AxiosInstance,\n  registrationId: number\n): Promise<void> => {\n  return axios.delete(`/mainevent/registrants/${registrationId}/`)\n    .then(() => {\n      return;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\nexport const getEventRegistrationDetail = async (\n  axios: AxiosInstance,\n  registrationId: number\n): Promise<EventRegistrationDetail> => {\n  return axios\n    .get<EventRegistrationDetail>(`/mainevent/registrants/${registrationId}/`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};\n\n\nexport const submitEventTaskResponse = async (\n  axios: AxiosInstance,\n  registrationId: number,\n  taskId: number,\n  value: string\n): Promise<TaskResponse> => {\n  return axios\n    .post<TaskResponse>(\n      `/mainevent/registrants/${registrationId}/tasks/${taskId}/`,\n      { response: value })\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error: AxiosError) => {\n      throw new ApiError<StandardError>(StandardError.ERROR, error.message);\n    });\n};","import { useContext } from \"react\";\nimport useSWR from \"swr\";\nimport { getEvent, LIST_EVENT_URL } from \"api/event\";\nimport { ApiContext } from \"utils/context/api\";\nimport DashboardCard from \"components/dashboard/DashboardCard\";\nimport { Event } from \"interfaces/event\";\nimport Alert from \"components/Alert\";\nimport Spinner from \"components/Spinner\";\n\nconst EventsPage: React.FC = () => {\n  const baseUrl = \"/dashboard/events/\";\n\n  const apiContext = useContext(ApiContext);\n\n  const { data: event, error: errorEvent } = useSWR(LIST_EVENT_URL, () =>\n    getEvent(apiContext.axios)\n  );\n\n  if (errorEvent) return <Alert error=\"Masalah koneksi\" />;\n  if (!event) return <Spinner height=\"200px\" />;\n\n  const generateCardBody = (shortDesc: string): string => {\n    return shortDesc;\n  };\n\n  const generateCardText = (entry: Event): string => {\n    if (!entry.isRegistrationOpen) {\n      return \"Pendaftaran ditutup\";\n    } else {\n      return \"Daftar\";\n    }\n  };\n\n  return (\n    <div className=\"mb-3\">\n      <div className=\"row\">\n        {event.map((entry, index) => (\n          <DashboardCard\n            key={index}\n            className=\"col-md-6 col-lg-4\"\n            title={entry.name}\n            body={generateCardBody(entry.shortDesc)}\n            buttonLink={\n              entry.isRegistrationOpen ? `${baseUrl}${entry.slug}` : null\n            }\n            buttonText={generateCardText(entry)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default EventsPage;\n","import DashboardWrapper from \"components/dashboard/DashboardWrapper\";\nimport Layout from \"components/Layout\";\nimport { Theme } from \"styles/theme\";\nimport EventsPage from \"components/page/dashboard/EventsPage\";\n\nconst IndexPage: React.FC = () => (\n  <Layout title=\"Events\" background={Theme.bgColors.whtogr}>\n    <DashboardWrapper>\n      <EventsPage />\n    </DashboardWrapper>\n  </Layout>\n);\n\nexport default IndexPage;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/dashboard/events\",\n      function () {\n        return require(\"private-next-pages/dashboard/events/index.tsx\");\n      }\n    ]);\n  "],"sourceRoot":""}