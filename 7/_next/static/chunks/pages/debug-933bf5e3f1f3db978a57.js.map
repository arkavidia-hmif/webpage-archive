{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?2c4f","webpack://_N_E/./components/FilledButton.tsx","webpack://_N_E/./pages/debug.tsx","webpack://_N_E/./styles/theme.ts","webpack://_N_E/./utils/context/api.ts"],"names":["window","__NEXT_P","push","FilledButton","onClick","text","padding","loading","submit","fontSize","color","Theme","buttonColors","pinkButton","id","evt","style","type","main","hover","Debug","colors","blue","superlight","light","dark","purple","pink","red","blueButton","lightBlueButton","darkPinkButton","purpleButton","bgColors","whblpi","whpipl","whblplc","whblpl","whtogr","headerColors","plbl","plpi","pipl","competitionColors","subHeadingColor","alertColors","redAlert","yellowAlert","greenAlert","ApiContext","createContext"],"mappings":"6FACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,SACA,WACE,OAAO,EAAQ,Y,qGCgGRC,IAvFuB,SAAC,GAQjC,IAPJC,EAOI,EAPJA,QACAC,EAMI,EANJA,KACAC,EAKI,EALJA,QACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,OAGI,IAFJC,gBAEI,MAFO,OAEP,MADJC,aACI,MADIC,IAAMC,aAAaC,WACvB,EAQJ,OACE,kBACE,YACEC,GAAG,YACHV,QAVe,SAACW,IACfR,GAAWH,GACdA,EAAQW,IASNC,MAAO,CAAEV,WACTW,KAAMT,EAAS,SAAW,SAJ5B,qCAmBsBE,EAAMQ,KAIbT,IAvBf,eAuDIF,EAAU,iBAAmB,GAG7BA,EAAU,UAAYG,EAAMQ,KAAO,IAAM,GACzCX,EAAU,gBAAkB,mBAG5BA,EAAU,GAAK,qBAAuBG,EAAMS,WAxD9C,SAAKL,GAAG,SAAR,qCAaoBJ,EAAMQ,KAIbT,IAjBb,eAiDEF,EAAU,iBAAmB,GAG7BA,EAAU,UAAYG,EAAMQ,KAAO,IAAM,GACzCX,EAAU,gBAAkB,mBAG5BA,EAAU,GAAK,qBAAuBG,EAAMS,YAvD9C,4CAYoBT,EAAMQ,KAIbT,IAhBb,eAgDEF,EAAU,iBAAmB,GAG7BA,EAAU,UAAYG,EAAMQ,KAAO,IAAM,GACzCX,EAAU,gBAAkB,mBAG5BA,EAAU,GAAK,qBAAuBG,EAAMS,WAvD1Cd,IARR,+BAoBwBK,EAAMQ,KAIbT,IAxBjB,oMAoBwBC,EAAMQ,KApB9B,8HAwBiBT,EAxBjB,+0BAwDMF,EAAU,iBAAmB,GAG7BA,EAAU,UAAYG,EAAMQ,KAAO,IAAM,GACzCX,EAAU,gBAAkB,mBAG5BA,EAAU,GAAK,qBAAuBG,EAAMS,QA/DlD,gDAwDMZ,EAAU,iBAAmB,GAxDnC,wDA2DMA,EAAU,UAAYG,EAAMQ,KAAO,IAAM,GA3D/C,YA4DMX,EAAU,gBAAkB,mBA5DlC,4GA+DMA,EAAU,GAAK,qBAAuBG,EAAMS,MA/DlD,W,sHC2DWC,UApFS,WAEpB,OAAO,2B,kCCWX,sCAoEaT,EAAQ,CACnBU,OAAQ,CACNC,KAtEwB,CAC1BC,WAAY,UACZC,MAAO,UACPN,KAAM,UACNO,KAAM,WAmEJC,OAhE0B,CAC5BH,WAAY,UACZC,MAAO,UACPN,KAAM,UACNO,KAAM,WA6DJE,KA1DwB,CAC1BJ,WAAY,UACZC,MAAO,UACPN,KAAM,UACNO,KAAM,WAuDJG,IApDuB,CACzBL,WAAY,UACZC,MAAO,UACPN,KAAM,UACNO,KAAM,YAkDNb,aAAc,CACZiB,WA3C4B,CAC9BX,KAAM,UACNC,MAAO,WA0CLW,gBAvCiC,CACnCZ,KAAM,UACNC,MAAO,WAsCLN,WAnC4B,CAC9BK,KAAM,UACNC,MAAO,WAkCLY,eA/BgC,CAClCb,KAAM,UACNC,MAAO,WA8BLa,aApD8B,CAChCd,KAAM,UACNC,MAAO,YAoDPc,SAAU,CACRC,OAAQ,mEACRC,OACE,iIACFC,QACE,0HACFC,OACE,gIACFC,OACE,yFAEJC,aAAc,CACZC,KAAM,qDACNC,KAAM,qDACNC,KAAM,qDAERC,kBAAmB,CACjBC,gBAAiB,WAEnBC,YAAa,CACXC,SAjDyB,CAC3B5B,KAAM,UACNb,KAAM,SAgDJ0C,YA7C4B,CAC9B7B,KAAM,UACNb,KAAM,SA4CJ2C,WAzC2B,CAC7B9B,KAAM,UACNb,KAAM,Y,kCClFR,kDAMa4C,EAAaC,wBAA8B,M","file":"static/chunks/pages/debug-933bf5e3f1f3db978a57.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/debug\",\n      function () {\n        return require(\"private-next-pages/debug.tsx\");\n      }\n    ]);\n  ","import * as React from \"react\";\nimport { ButtonColor, Theme } from \"../styles/theme\";\n\ninterface Props {\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  text: string;\n  submit?: boolean;\n  padding?: string;\n  color?: ButtonColor;\n  loading?: boolean;\n  fontSize?: string;\n}\n\nconst FilledButton: React.FC<Props> = ({\n  onClick,\n  text,\n  padding,\n  loading,\n  submit,\n  fontSize = \"1rem\",\n  color = Theme.buttonColors.pinkButton,\n}) => {\n\n  const clickHandler = (evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (!loading && onClick) {\n      onClick(evt);\n    }\n  };\n\n  return (\n    <>\n      <button\n        id=\"container\"\n        onClick={clickHandler}\n        style={{ padding }}\n        type={submit ? \"submit\" : \"button\"}\n      >\n        <div id=\"loader\"></div>\n        <b>{text}</b>\n      </button>\n      <style jsx>{`\n      button {\n        border: 0;\n        outline: 0;\n      }\n      #container {\n        border: 0;\n        display: inline-block;\n        padding: 0.5rem 1rem;\n        border-radius: 10px;\n        background-color: ${color.main};\n        color: white;\n        transition: background-color 0.1s;\n        position: relative;\n        font-size: ${fontSize}\n      }\n\n      #loader {\n        display: none;\n\n        border: 4px solid white;\n        border-top: 4px solid transparent;\n        border-radius: 50%;\n        width: 30px;\n        height: 30px;\n        animation: spin 2s linear infinite;\n\n        position: absolute;\n        margin: auto;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n      }\n\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n    `}</style>\n      <style jsx>{`\n      #loader {\n        ${loading ? \"display: block\" : \"\"}\n      }\n      #container {\n        ${loading ? \"color: \" + color.main + \";\" : \"\"}\n        ${loading ? \"cursor: auto;\" : \"cursor: pointer;\"}\n      }\n      #container:hover, #container:focus {\n        ${loading ? \"\" : \"background-color: \" + color.hover}\n      }\n    `}</style>\n    </>\n  );\n};\n\nexport default FilledButton;\n","import { useContext, useState } from \"react\";\nimport FilledButton from \"../components/FilledButton\";\nimport { ApiContext } from \"../utils/context/api\";\nimport { AuthContext } from \"../utils/context/auth\";\n\nconst Debug: React.FC = () => {\n  if (process.env.NODE_ENV === \"production\") {\n    return <p>Restricted</p>;\n  }\n\n  const authContext = useContext(AuthContext);\n  const apiContext = useContext(ApiContext);\n\n  const [result, setResult] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <>\n      <h1>Debug page</h1>\n      <p>API Url: {process.env.API_BASE_URL}</p>\n      <h2>Auth State</h2>\n      <p>authenticated: {authContext.authenticated ? \"true\" : \"false\"}</p>\n      <p>auth: {JSON.stringify(authContext.auth)}</p>\n      <h2>Request result</h2>\n      <p>{result}</p>\n      <h2>Action</h2>\n      <form>\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"email\"\n          value={email}\n          onChange={(evt) => {\n            setEmail(evt.target.value);\n          }}\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(evt) => {\n            setPassword(evt.target.value);\n          }}\n        />\n      </form>\n      <br />\n      <FilledButton\n        text=\"login/logout\"\n        onClick={() => {\n          if (!authContext.authenticated) {\n            apiContext.axios\n              .post(\"/auth/login/\", {\n                email,\n                password,\n              })\n              .then((data) => {\n                authContext.setAuthenticated(true);\n                authContext.setAuth(data.data);\n              })\n              .catch((err) => {\n                setResult(JSON.stringify(err.response));\n              });\n          } else {\n            authContext.setAuthenticated(!authContext.authenticated);\n            authContext.setAuth();\n          }\n        }}\n      />\n      <br />\n      <br />\n      <FilledButton\n        text=\"fetch session\"\n        onClick={() => {\n          apiContext.axios\n            .get(\"/auth\")\n            .then((data) => {\n              setResult(JSON.stringify(data));\n            })\n            .catch((err) => {\n              setResult(JSON.stringify(err.response));\n            });\n        }}\n      />\n    </>\n  );\n};\n\nexport default Debug;\n","export interface StandardColor {\n  superlight: string;\n  light: string;\n  main: string;\n  dark: string;\n}\n\nexport interface ButtonColor {\n  main: string;\n  hover: string;\n}\n\nexport interface AlertColor {\n  main: string;\n  text: string;\n}\n\n\nconst blue: StandardColor = {\n  superlight: \"#CAF1F1\",\n  light: \"#5EE6E9\",\n  main: \"#10ECFE\",\n  dark: \"#0E2A47\",\n};\n\nconst purple: StandardColor = {\n  superlight: \"#DBC2FF\",\n  light: \"#B196FE\",\n  main: \"#3E22BC\",\n  dark: \"#441985\",\n};\n\nconst pink: StandardColor = {\n  superlight: \"#FFDDF4\",\n  light: \"#F3A9DD\",\n  main: \"#FE65D4\",\n  dark: \"#B41A83\",\n};\n\nconst red: StandardColor = {\n  superlight: \"#FBBCC7\",\n  light: \"#FE94AB\",\n  main: \"#FE5981\",\n  dark: \"#AC0B3D\",\n};\n\nconst purpleButton: ButtonColor = {\n  main: \"#623FA2\",\n  hover: \"#936bd4\",\n};\n\nconst blueButton: ButtonColor = {\n  main: \"#00B6F1\",\n  hover: \"#5EE6E9\",\n};\n\nconst lightBlueButton: ButtonColor = {\n  main: \"#5FE6EA\",\n  hover: \"#98ffff\",\n};\n\nconst pinkButton: ButtonColor = {\n  main: \"#fe789a\",\n  hover: \"#ffaacb\",\n};\n\nconst darkPinkButton: ButtonColor = {\n  main: \"#FE65D4\",\n  hover: \"#F3A9DD\",\n};\n\nconst redAlert: AlertColor = {\n  main: \"#ff5252\",\n  text: \"white\"\n};\n\nconst yellowAlert: AlertColor = {\n  main: \"#FDB43C\",\n  text: \"white\"\n};\n\nconst greenAlert: AlertColor = {\n  main: \"#1AA345\",\n  text: \"white\"\n};\n\nexport const Theme = {\n  colors: {\n    blue,\n    purple,\n    pink,\n    red,\n  },\n  buttonColors: {\n    blueButton,\n    lightBlueButton,\n    pinkButton,\n    darkPinkButton,\n    purpleButton,\n  },\n  bgColors: {\n    whblpi: \"linear-gradient(to bottom, #FFFFFF 4%, #DAFFFF 44%, #FFDFF2 93%)\", // White blue pink\n    whpipl:\n      \"linear-gradient(to bottom, rgba(255, 255, 255, 0.26) 0.19%, rgba(255, 163, 186, 0.38) 59.95%, rgba(168, 142, 215, 0.56) 100%);\", // White pink purple\n    whblplc:\n      \"linear-gradient(180deg, rgba(255, 255, 255, 0.15) 0%, rgba(0, 255, 255, 0.03) 46.78%, rgba(179, 149, 255, 0.659) 100%);\",\n    whblpl:\n      \"linear-gradient(to bottom, rgba(255, 255, 255, 0.15) 17.32%, rgba(0, 255, 255, 0.21) 56.34%, rgba(218, 125, 218, 0.58) 100%);\", // White blue purple\n    whtogr:\n      \"linear-gradient(0deg, rgba(168, 142, 215, 0.39) 2.49%, rgba(196, 196, 196, 0) 48.34%)\", // white to grey\n  },\n  headerColors: {\n    plbl: \"linear-gradient(120deg, #835FBF, #835FBF, #30C5E8)\", // Purple blue (e.g on competition page)\n    plpi: \"linear-gradient(120deg, #623FA2 25%, #FE5982 100%)\",\n    pipl: \"linear-gradient(110deg, #FE789A 0%, #623FA2 100%)\",\n  },\n  competitionColors: {\n    subHeadingColor: \"#05058d\"\n  },\n  alertColors: {\n    redAlert,\n    yellowAlert,\n    greenAlert\n  }\n};\n","import { AxiosInstance } from \"axios\";\nimport { createContext } from \"react\";\n\nexport interface ApiContextType {\n  axios: AxiosInstance\n}\n\nexport const ApiContext = createContext<ApiContextType>({} as ApiContextType);"],"sourceRoot":""}